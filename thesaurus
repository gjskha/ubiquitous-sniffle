#!/usr/bin/python
# interface to the Merriam-Webster thesaurus

import json
import requests
import getopt
import sys
import os

"""
print out a help message
"""
def help():

	scriptname = os.path.basename(__file__)

	helpmsg = """
	{} -- lookup the Merriam-Webster thesaurus
	Usage:
	$ {} -h
	$ {} [-s -a -x -c ] -w [word]

	Where :

	-h prints this message
	-w is followed by the word to look up
	-c cache the results
	-a do not display antonyms
	-s do not display synonyms
	-r use specified config file
	-x check cache on disk first
	""".format(scriptname,scriptname,scriptname)

	print(helpmsg)

"""
go get the serialized data. it checks on disk and on the remote server, in the
order specified in the config.
"""
def fetch_resource(filename,url,config):
	resource = None

	for method in config["methods"]:
		if (method == "net") and (resource == None):

			response = requests.get(url)
			if response.status_code == 200:
				resource = response.json()

		if (method == "disk") and (resource == None):

			try:
				with open(filename) as f:
					resource = json.loads(f.read())
			except IOError:
				print("File not accessible")

	return resource


"""
accepts a filename and returns a deserialized representation of the json.
"""
def parse_config(filename):
	config = None
	try:
		with open(filename) as config_file:
			config = json.loads(config_file.read())
	except IOError:
		print("config file not found")

	return config

"""
prepare the request for an entry
"""
def get_body(word,config):
	url = "https://www.dictionaryapi.com/api/v3/references/thesaurus/json/" + word + "?key=" + config["thesaurus_key"]
	filename = config["cache_dir"] + "/" + word + ".json"

	json = fetch_resource(filename,url,config)

	return json

"""
"""
def print_data(data,config):
	print("print the data")

"""
parse the command line options and do the work
"""
def main():

	# set program defaults first
	methods = ["net","disk"]
	config_file = os.environ['HOME'] + "/.mwrc"
	antonyms = True
	synonyms = True

	# parse command line options
	(args, _) = getopt.getopt(sys.argv[1:], 'hxc:w:as')
	for o,a in args:

		if o == "-h":
			help()
			exit()

		elif o == "-w":
			word = a

		# look up word in cache first
		elif o == "-x":
			methods = ["disk","net"]

		# No synonyms, only antonyms
		elif o == "-s":
			synonyms = False
		# No antonyms, only synonyms
		elif o == "-a":
			antonyms = False

		elif o == "-c":
			config_file = a

		else:
			assert False, "unhandled option"
	
	# testing for non instantiated variables in python is verbose
	try:
		word
	except NameError:
		print("No word specified, quitting.")
		exit(1)

	config = parse_config(config_file)
	config["methods"] = methods

	data = get_body(word, config)

	#print(data[0])

	if not data:
		print("Empty response from remote server.")
		exit()

	# we received unexpected data
	if 'hwi' not in data[0]:
		print(data)
		exit()

	# todo: work all noun, adjective, verb senses together?
	for i in range(len(data)):
		print('')
		#print("==%d==" %(i+1))
		print("The word " + word + " as a " + data[i]["fl"] + ":")

		# synonyms
		if synonyms and len(data[i]["meta"]["syns"]) > 0:
			print("synonyms:")
			for j in range(len(data[i]["meta"]["syns"])):
				print(j+1, end=") ")
				print(', '.join(data[i]["meta"]["syns"][j]))

		# antonyms
		if antonyms and len(data[i]["meta"]["ants"]) > 0:
			print("antonyms:")
			for j in range(len(data[i]["meta"]["ants"])):
				print(j+1, end=") ")
				print(', '.join(data[i]["meta"]["ants"][j]))

		#print_data(word_data,config)

"""
entry point
"""
if __name__ == "__main__":
 	main()
